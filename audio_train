function  Collected_feature = audio_train(v,Fs)

v=v(1:50000);

%sampling and quantization
Sam_signal = sampling(v,1);
Quanti_signal = quantization(v,64); 

%%pre-emphasis
a=0.95;
y2 = filter([1, -a], 1, v);
time=(1:length(v))/Fs;
au2=Quanti_signal; 
au2.signal=y2;


%Framing 
s=y2(.4*length(y2):end)';  
Number_of_frames=240; 
window_length=round(Fs/Number_of_frames);%size of the frame
Frame_No=zeros(Number_of_frames);%The frame number
Frame_No(1)=1;
for i=1:Number_of_frames-1
    Frame_No(i+1)=Frame_No(i)+window_length;
end


%Windowing
 k12 = hamming(length(v));
original=y2;
windowed=v.* k12;
[mag1, phase1, freq1]=fftOneSide(original, Fs);
[mag2, phase2, freq2]=fftOneSide(windowed, Fs);


%%% end point detection
THRESHOLD=0.3; 
TIME=5;

samplePerFrame=floor(Fs/100);
bgSampleCount=floor(Fs/5); 

%calculation of mean and std
bgSample=[];
for i=1:1:bgSampleCount
    bgSample=[bgSample windowed(i)];
end
meanVal=mean(bgSample);
sDev=std(bgSample);
%----------
%identify voiced or not for each value
for i=1:1:length(windowed)
   if(abs(windowed(i)-meanVal)/sDev > THRESHOLD)
       voiced(i)=1;
   else
       voiced(i)=0;
   end
end


%discard insufficient samples of last frame

usefulSamples=length(windowed)-mod(length(windowed),samplePerFrame);
frameCount=usefulSamples/samplePerFrame;
voicedFrameCount=0;
for i=1:1:frameCount
   cVoiced=0;
   cUnVoiced=0;
   for j=i*samplePerFrame-samplePerFrame+1:1:(i*samplePerFrame)
       if(voiced(j)==1)
           cVoiced=(cVoiced+1);
       else
           cUnVoiced=cUnVoiced+1;
       end
   end
   %mark frame for voiced/unvoiced
   if(cVoiced>cUnVoiced)
       voicedFrameCount=voicedFrameCount+1;
       voicedUnvoiced(i)=1;
   else
       voicedUnvoiced(i)=0;
   end
end

silenceRemovedSignal=[];

%-----
for i=1:1:frameCount
    if(voicedUnvoiced(i)==1)
    for j=i*samplePerFrame-samplePerFrame+1:1:(i*samplePerFrame)
            silenceRemovedSignal= [silenceRemovedSignal windowed(j)];
        end
    end
end


    win = 0.050;
    step = 0.050;
Cor = SpectralCentroid(silenceRemovedSignal, window_length*Fs, step*Fs, Fs);

    MFCCs = mfcc_feature1(silenceRemovedSignal,Fs);
    
    [coeff, score, latent, tsquared, explained, mu] = rmrm_selection( MFCCs);
    
    Collected_feature=[coeff(1) score(1) latent(1) tsquared(1) explained(1) mu(1)];
    
